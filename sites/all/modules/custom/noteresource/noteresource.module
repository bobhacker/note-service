<?php
/**
 * @file.
 * noteresource.module
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function noteresource_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'notresource.services.inc', // Optional parameter to indicate the file name to load.
      'path' => drupal_get_path('module', 'noteresource') . '/includes', // If specifying the file key, path is required.
    );
  }
}

/**
 * Implements hook_permission().
 */
function noteresource_permission() {
  return array(
    'note resource create' => array(
      'title' => t('Create a note'),
      'description' => t('Permission to create a note.'),
    ),
    'note resource view any note' => array(
      'title' => t('View any note'),
      'description' => t('Permission to view any note.'),
    ),
    'note resource view own notes' => array(
      'title' => t('View own notes'),
      'description' => t('Permission to view own notes.'),
    ),
    'note resource edit any note' => array(
      'title' => t('Edit any note'),
      'description' => t('Permission to edit any note.'),
    ),
    'note resource edit own notes' => array(
      'title' => t('Edit own notes'),
      'description' => t('Permission to edit own notes.'),
    ),
    'note resource delete any note' => array(
      'title' => t('Delete any note'),
      'description' => t('Permission to delete any note.'),
    ),
    'note resource delete own notes' => array(
      'title' => t('Delete own notes'),
      'description' => t('Permission to delete own notes.'),
    ),
  );
}

/**
 * Implements hook_services_resources().
 */
function noteresource_services_resources() {
  return array(
    'note' => array(
      'retrieve' => array(
        'help' => t('Retrieves a note'),
        'file' => array('type' => 'inc', 'module' => 'noteresource', 'name' => 'noteresource'),
        'callback' => '_noteresource_retrieve',
        'access callback' => '_noteresource_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => t('The id of the note to get.'),
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'create' => array(
        'help' => t('Creates a note'),
        'file' => array('type' => 'inc', 'module' => 'noteresource', 'name' => 'noteresource'),
        'callback' => '_noteresource_create',
        'access arguments' => array('note resource create'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => t('The note object.'),
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
      'update' => array(
        'help' => t('Updates a note'),
        'file' => array('type' => 'inc', 'module' => 'noteresource', 'name' => 'noteresource'),
        'callback' => '_noteresource_update',
        'access callback' => '_noteresource_access',
        'access arguments' => array('update'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => t('The id of the node to update.'),
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => t('The note data object.'),
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
      'delete' => array(
        'help' => t('Deletes a note'),
        'file' => array('type' => 'inc', 'module' => 'noteresource', 'name' => 'noteresource'),
        'callback' => '_noteresource_delete',
        'access callback' => '_noteresource_access',
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'nid',
            'type' => 'int',
            'description' => t('The id of the note to delete.'),
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'index' => array(
        'help' => t('Retrieves a listing of notes'),
        'file' => array('type' => 'inc', 'module' => 'noteresource', 'name' => 'noteresource'),
        'callback' => '_noteresource_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => '',
            'source' => array(
              'param' => 'page',
            ),
            'optional' => TRUE,
            'default value' => 0,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
    ),
  );
}

/**
 * Gets a note object by id.
 *
 * @param int $id
 * @return object
 */
function noteresource_get_note($id) {
  return db_query("SELECT * FROM {note} WHERE id=:id", array(
    ':id' => $id,
  ))->fetch();
}
/**
 * Writes a note to the database
 *
 * @param array $note
 * @return void
 */
function noteresource_write_note(&$note) {
  $primary_key = empty($note['id']) ? array() : array('id');
  drupal_write_record('note', $note, $primary_key);
}
/**
 * Deletes a note from the database.
 *
 * @param int $id
 * @return void
 */
function noteresource_delete_note($id) {
  db_query("DELETE FROM {note} WHERE id=:id", array(
    ':id' => $id,
  ));
}

/**
 * Access callback for the note resource.
 *
 * @param string $op
 *  The operation that's going to be performed.
 * @param array $args
 *  The arguments that will be passed to the callback.
 * @return bool
 *  Whether access is given or not.
 */
function _noteresource_access($op, $args) {
  global $user;
  $access = FALSE;
  switch ($op) {
    case 'view':
      $note = noteresource_get_note($args[0]);
      $access = user_access('note resource view any note');
      $access = $access || $note->uid == $user->uid && user_access('note resource view own notes');
      break;
    case 'update':
      $note = noteresource_get_note($args[0]['id']);
      $access = user_access('note resource edit any note');
      $access = $access || $note->uid == $user->uid && user_access('note resource edit own notes');
      break;
    case 'delete':
      $note = noteresource_get_note($args[0]);
      $access = user_access('note resource delete any note');
      $access = $access || $note->uid == $user->uid && user_access('note resource delete own notes');
      break;
  }
  return $access;
}

/**
 * Processes services error.
 * @param string $message
 * @param string $code
 * @return void
 */
function _process_services_error($message, $code) {
  $data = array('error' => array('code' => $code, 'message' => $message));
  services_error($message, $code, $data);
}
